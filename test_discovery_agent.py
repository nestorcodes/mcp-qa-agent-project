#!/usr/bin/env python3
"""
Script de prueba para el Discovery Agent modificado
Prueba el nuevo flujo: 3 preguntas b√°sicas + discovery din√°mico
"""

import requests
import json
import time
from typing import Dict, Any

# Configuraci√≥n
BASE_URL = "http://localhost:8021"
API_KEY = "demo-key"
HEADERS = {"x-api-key": API_KEY}

def test_discovery_agent():
    """Prueba el flujo completo del discovery agent"""
    
    print("üß™ INICIANDO PRUEBA DEL DISCOVERY AGENT")
    print("=" * 50)
    
    # ID √∫nico para la conversaci√≥n
    convo_id = f"test_discovery_{int(time.time())}"
    
    # Simular respuestas del empleado
    employee_responses = [
        "Hola, quiero participar en la entrevista",
        "Mar√≠a Gonz√°lez",
        "Analista de Recursos Humanos",
        "Me encargo del reclutamiento, onboarding de empleados y evaluaci√≥n de desempe√±o. Tambi√©n manejo la comunicaci√≥n con candidatos y coordino entrevistas con los gerentes.",
        "Mis procesos principales incluyen: 1) Revisar CVs y filtrar candidatos, 2) Coordinar entrevistas con gerentes, 3) Gestionar el proceso de onboarding, 4) Realizar evaluaciones de desempe√±o trimestrales, 5) Mantener actualizada la base de datos de empleados.",
        "Para el reclutamiento, primero reviso los CVs que llegan por Workday y LinkedIn. Luego filtro por experiencia y habilidades requeridas. Despu√©s coordino con el gerente del √°rea para programar entrevistas. Todo el proceso toma entre 2-3 semanas.",
        "El proceso de onboarding es m√°s complejo. Necesito coordinar con IT para acceso a sistemas, con el gerente para plan de trabajo, y con Recursos Humanos para documentaci√≥n. A veces hay retrasos porque IT est√° ocupado con otras prioridades.",
        "S√≠, me gustar√≠a que el proceso de onboarding fuera m√°s automatizado. Actualmente tengo que hacer seguimiento manual de cada paso y recordar a las personas cuando deben completar sus tareas.",
        "Uso Workday para gesti√≥n de empleados, LinkedIn para reclutamiento, Excel para seguimiento de procesos, y Outlook para comunicaci√≥n. Workday es √∫til pero a veces es lento, y Excel requiere mucho trabajo manual.",
        "Me comunico principalmente por email y reuniones semanales. Con los gerentes tengo reuniones quincenales para revisar candidatos y con IT uso tickets del sistema. A veces hay malentendidos por falta de comunicaci√≥n centralizada."
    ]
    
    print(f"üìù ID de conversaci√≥n: {convo_id}")
    print(f"üë§ Empleado de prueba: {employee_responses[1]} - {employee_responses[2]}")
    print()
    
    # Procesar cada respuesta
    for i, response in enumerate(employee_responses):
        print(f"üîÑ Pregunta {i+1}: {response}")
        
        try:
            # Enviar respuesta al discovery agent
            result = requests.post(
                f"{BASE_URL}/discovery-webhook",
                json={
                    "message": response,
                    "convo_id": convo_id,
                    "files": []
                },
                headers=HEADERS
            )
            
            if result.status_code == 200:
                data = result.json()
                print(f"‚úÖ Respuesta del agente: {data['reply']}")
                print(f"üìä Etapa: {data['stage']}")
                print(f"üîç Siguiente pregunta: {data['next_question']}")
                
                # Verificar si se envi√≥ al webhook
                if data.get('context', {}).get('webhook_sent'):
                    print("üì§ ‚úÖ Informaci√≥n enviada al webhook")
                
            else:
                print(f"‚ùå Error en la respuesta: {result.status_code}")
                print(f"Detalle: {result.text}")
                break
                
        except Exception as e:
            print(f"‚ùå Error al procesar respuesta {i+1}: {str(e)}")
            break
        
        print("-" * 40)
        time.sleep(1)  # Pausa entre preguntas
    
    # Verificar informaci√≥n final
    print("\nüìã VERIFICANDO INFORMACI√ìN FINAL")
    print("=" * 50)
    
    try:
        # Obtener conversaciones de discovery
        conversations = requests.get(
            f"{BASE_URL}/discovery-conversations",
            headers=HEADERS
        )
        
        if conversations.status_code == 200:
            data = conversations.json()
            if convo_id in data.get("discovery_conversations", {}):
                conv_info = data["discovery_conversations"][convo_id]
                print(f"‚úÖ Conversaci√≥n encontrada:")
                print(f"   - Nombre: {conv_info.get('employee_name')}")
                print(f"   - Puesto: {conv_info.get('position')}")
                print(f"   - Etapa: {conv_info.get('stage')}")
                print(f"   - Progreso: {conv_info.get('progress')}")
                print(f"   - √öltima actualizaci√≥n: {conv_info.get('last_updated')}")
            else:
                print("‚ùå Conversaci√≥n no encontrada en el listado")
        else:
            print(f"‚ùå Error al obtener conversaciones: {conversations.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error al verificar informaci√≥n final: {str(e)}")
    
    print("\nüéØ PRUEBA COMPLETADA")
    print("=" * 50)

def test_webhook_endpoint():
    """Prueba el endpoint de webhook"""
    
    print("\nüß™ PROBANDO ENDPOINT DE WEBHOOK")
    print("=" * 50)
    
    try:
        result = requests.post(
            f"{BASE_URL}/test-webhook",
            headers=HEADERS
        )
        
        if result.status_code == 200:
            data = result.json()
            print("‚úÖ Webhook funcionando correctamente")
            print(f"üì§ Datos enviados: {data.get('data_sent')}")
            print(f"üìã Resultado: {data.get('result')}")
        else:
            print(f"‚ùå Error en webhook: {result.status_code}")
            print(f"Detalle: {result.text}")
            
    except Exception as e:
        print(f"‚ùå Error al probar webhook: {str(e)}")

def test_api_status():
    """Prueba el estado de la API"""
    
    print("\nüß™ VERIFICANDO ESTADO DE LA API")
    print("=" * 50)
    
    try:
        result = requests.get(f"{BASE_URL}/")
        
        if result.status_code == 200:
            data = result.json()
            print("‚úÖ API funcionando correctamente")
            print(f"üìä Versi√≥n: {data.get('version')}")
            print(f"üéØ Mensaje: {data.get('message')}")
            
            # Verificar informaci√≥n del discovery agent
            if "discovery" in data.get("agents", {}):
                discovery_info = data["agents"]["discovery"]
                print(f"üîç Discovery Agent:")
                print(f"   - Descripci√≥n: {discovery_info.get('description')}")
                print(f"   - Endpoint: {discovery_info.get('endpoint')}")
                print(f"   - Etapas: {discovery_info.get('stages')}")
            else:
                print("‚ùå Informaci√≥n del discovery agent no encontrada")
                
        else:
            print(f"‚ùå Error en API: {result.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error al verificar API: {str(e)}")

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL DISCOVERY AGENT MODIFICADO")
    print("=" * 60)
    
    # Verificar que la API est√© funcionando
    test_api_status()
    
    # Probar el webhook
    test_webhook_endpoint()
    
    # Probar el flujo completo del discovery agent
    test_discovery_agent()
    
    print("\nüéâ TODAS LAS PRUEBAS COMPLETADAS")
    print("=" * 60)
